namespace PixelPuzzle.Logic {
    public static class SmallMapGenerator {
        public static int[,] Boat() {
            return new int[8, 8] {
                { 0, 0, 0, 0, 1, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 0, 0, 0 },
                { 0, 1, 1, 1, 1, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
            };
        }

        public static int[,] Pattern() {
            return new int[8, 8] {
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
            };
        }

        public static int[,] Fish() {
            return new int[8, 8] {
                { 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 1, 1, 1, 1, 0, 1, 1 },
                { 1, 1, 0, 0, 1, 0, 1, 1 },
                { 1, 0, 1, 0, 1, 1, 1, 0 },
                { 1, 0, 0, 0, 1, 1, 1, 0 },
                { 1, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 0, 0, 1, 0, 1, 1 },
                { 0, 1, 1, 1, 1, 0, 1, 1 },
            };
        }

        public static int[,] Sword() {
            return new int[8, 8] {
                { 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 1, 1, 1 },
                { 0, 0, 0, 0, 1, 1, 1, 0 },
                { 1, 1, 0, 1, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 0, 0, 0 },
                { 0, 1, 1, 1, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0 },
                { 1, 1, 0, 0, 1, 0, 0, 0 },
            };
        }

        public static int[,] Heart() {
            return new int[8, 8] {
                { 0, 1, 1, 0, 0, 1, 1, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
            };
        }

        public static int[,] BowlingBall() {
            return new int[8, 8] {
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 1, 0, 1, 1, 1, 1 },
                { 1, 1, 0, 1, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
            };
        }

        public static int[,] Cross() {
            return new int[8, 8] {
                { 1, 1, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 1, 0, 0, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 1, 1 },
            };
        }

        public static int[,] Pattern2() {
            return new int[8, 8] {
                { 1, 1, 1, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 1, 1, 1, 1, 0, 0 },
                { 1, 0, 1, 0, 0, 0, 0, 0 },
                { 1, 0, 1, 0, 1, 1, 1, 0 },
                { 0, 0, 1, 0, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 1, 0 },
            };
        }

        public static int[,] Tower() {
            return new int[8, 8] {
                { 1, 1, 1, 0, 1, 1, 1, 0 },
                { 1, 1, 0, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 1, 0, 1, 0, 1 },
                { 0, 0, 0, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 1, 0, 1, 0, 1 },
                { 0, 0, 0, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 1, 0, 1, 0, 1 },
                { 0, 0, 0, 1, 1, 1, 1, 1 },
            };
        }

        public static int[,] Lamp() {
            return new int[8, 8] {
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
            };
        }

        public static int[,] Apple() {
            return new int[8, 8] {
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 0, 0, 0 },
                { 0, 1, 1, 1, 0, 1, 1, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 0, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 0, 1, 1, 0, 1, 0, 0 },
            };
        }

        public static int[,] Lightning() {
            return new int[8, 8] {
                { 0, 0, 0, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 1, 1, 0, 0, 0 },
                { 0, 1, 1, 1, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 1, 1, 1, 1, 0 },
                { 0, 0, 1, 1, 1, 0, 0, 0 },
                { 0, 1, 1, 1, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0 },
            };
        }

        public static int[,] Medal() {
            return new int[8, 8] {
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 1, 0, 0, 0, 0, 1, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 1, 1, 0, 1, 0, 0 },
                { 0, 0, 1, 0, 0, 1, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
            };
        }

        public static int[,] Pattern3() {
            return new int[8, 8] {
                { 1, 1, 1, 1, 1, 1, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 0, 0 },
                { 1, 1, 0, 0, 0, 1, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 1, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 0, 0, 1 },
                { 0, 0, 0, 1, 1, 1, 1, 0 },
                { 0, 0, 0, 0, 1, 1, 0, 0 },
            };
        }

        public static int[,] Skull() {
            return new int[8, 8] {
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 0, 0, 1, 1, 0, 0, 1 },
                { 1, 0, 0, 1, 1, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 0, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 1, 0, 1, 1, 0, 1, 0 },
            };
        }

        public static int[,] Bag() {
            return new int[8, 8] {
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 1, 0, 0 },
                { 0, 0, 1, 0, 0, 1, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
            };
        }

        public static int[,] Kettle() {
            return new int[8, 8] {
                { 0, 0, 1, 1, 1, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 0, 1, 0, 1, 1, 0, 1 },
                { 0, 0, 1, 0, 1, 1, 0, 1 },
                { 0, 0, 1, 0, 1, 1, 1, 0 },
                { 0, 0, 1, 0, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
            };
        }

        public static int[,] SpaceHoper() {
            return new int[8, 8] {
                { 0, 0, 1, 0, 0, 1, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 0, 1, 1, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 1, 1, 1 },
                { 0, 1, 1, 0, 0, 1, 1, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
            };
        }

        public static int[,] Pattern4() {
            return new int[8, 8] {
                { 1, 0, 0, 1, 1, 0, 0, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 1, 0, 0, 0, 0, 1, 0 },
                { 1, 1, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 1, 1 },
                { 0, 1, 0, 0, 0, 0, 1, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 0, 0, 1, 1, 0, 0, 1 },
            };
        }

        public static int[,] Pattern5() {
            return new int[8, 8] {
                { 0, 0, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 1, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 0, 1 },
                { 1, 0, 1, 1, 0, 1, 0, 1 },
                { 1, 0, 1, 0, 1, 1, 0, 1 },
                { 1, 0, 1, 1, 0, 1, 0, 1 },
                { 1, 0, 1, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 1, 0, 0 },
            };
        }

        public static int[,] Dog() {
            return new int[8, 8] {
                { 0, 0, 0, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 1, 0, 1, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 0, 0, 1, 0, 0 },
            };
        }

        public static int[,] Bed() {
            return new int[8, 8] {
                { 0, 0, 0, 1, 0, 0, 0, 0 },
                { 0, 1, 0, 0, 0, 1, 0, 0 },
                { 0, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 1, 0, 0, 0, 1 },
                { 1, 0, 1, 0, 1, 0, 0, 1 },
                { 1, 0, 1, 0, 1, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 1 },
            };
        }

        public static int[,] Pattern6() {
            return new int[8, 8] {
                { 1, 1, 1, 0, 0, 1, 1, 0 },
                { 1, 1, 0, 0, 1, 0, 0, 1 },
                { 1, 0, 0, 1, 1, 0, 0, 1 },
                { 0, 0, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 1, 1, 1, 1, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 1 },
                { 1, 1, 1, 1, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 1, 1, 1 },
            };
        }

        public static int[,] Creeper() {
            return new int[8, 8] {
                { 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 1, 1, 0, 0, 1, 1, 0 },
                { 0, 1, 1, 0, 0, 1, 1, 0 },
                { 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 0, 0, 1, 0, 0 },
            };
        }
    }
}
